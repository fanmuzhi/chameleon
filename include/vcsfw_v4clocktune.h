/* -*- mode: c; tab-width: 4 -*- */
/* $Header$ */

/*
 * Copyright (c) 2013-2015 Synaptics Incorporated.  All rights reserved.
 */

/*
 * vcsfw_v4clocktune.h -- This file defines the clocktune-patch private
 *  interface for the Metallica part.
 *
 * Bjoren Davis, September 16, 2013.
 */

/*
 * Note that as of September 1, 2015, this file is controlled
 *  authoritatively in the git repository
 *    ssh://gitms@git.synaptics.com/git/biometrics/include.git.
 * Updates will continue to be copied into the CVSNT repository
 *  in /test/engineering/private/impl/micro/falcon/shared/vcsfw_v4clocktune.h.
 * The last authoritative version of this file in CVSNT was
 *   /test/engineering/private/impl/micro/falcon/shared/vcsfw_v4clocktune.h,v 1.2 2014/12/24 18:13:25 bdavis
 * DO NOT EDIT THIS FILE IN THE CVSNT REPOSITORY.  Your changes will
 *  be overwritten.
 */

#ifndef __VCSFW_V4CLOCKTUNE_H
#define __VCSFW_V4CLOCKTUNE_H

#include "vcsPushPack1.h"
/****************************************************************************/
/* VCSFW_CMD_TEST_CLOCKTUNE                                                 */
/****************************************************************************/
/* COMMAND                                                                  */

#define VCSFW_CMD_TEST_CLOCKTUNE_FLAGS_ADJUST           0x00000001
#define VCSFW_CMD_TEST_CLOCKTUNE_FLAGS_USEHISTORY       0x00000002
#define VCSFW_CMD_TEST_CLOCKTUNE_FLAGS_REPLYTIMEVALID   0x00000004

typedef struct VCS_PACKED vcsfw_cmd_test_clocktune_s
{
    vcsUint32_t      walltime;      /* in units of microseconds (can wrap) */
    vcsUint32_t      walltime_err;  /* error/precision in microseconds */
    vcsUint32_t      flags;         /* flags (from above) */
    vcsUint32_t      replytime;     /* when previous reply was received */
} vcsfw_cmd_test_clocktune_t;


/* REPLY                                                                    */

#define VCSFW_CMD_TEST_CLOCKTUNE_NAMELEN    32
#define VCSFW_CMD_TEST_CLOCKTUNE_DESCLEN    64
#define VCSFW_CMD_TEST_CLOCKTUNE_PARAM_NAMELEN  24
#define VCSFW_CMD_TEST_CLOCKTUNE_NPARAM     2

/* Each reply has an array of these: */
typedef struct VCS_PACKED vcsfw_reply_test_clocktune_clock_param_s
{
    vcsUint32_t      curval;
    vcsUint32_t      newval;
    vcsUint32_t      newval_err;
    vcsUint8_t       name[VCSFW_CMD_TEST_CLOCKTUNE_PARAM_NAMELEN];
} vcsfw_reply_test_clocktune_clock_param_t;

/* Each reply contains one of these per clock */
typedef struct VCS_PACKED vcsfw_reply_test_clocktune_clock_s
{
    vcsUint32_t      speednom;      /* nominal clock speed, in Hz */
    vcsUint32_t      counter;       /* current counter for clock */
    vcsUint32_t      speedmeas;     /* measured clock speed, in Hz */
    vcsUint32_t      speedmeas_err; /* error/uncertainty on above */
    vcsfw_reply_test_clocktune_clock_param_t
                     params[VCSFW_CMD_TEST_CLOCKTUNE_NPARAM];
    vcsUint8_t       name[VCSFW_CMD_TEST_CLOCKTUNE_NAMELEN];
                                    /* name of clock */
    vcsUint8_t       desc[VCSFW_CMD_TEST_CLOCKTUNE_DESCLEN];
                                    /* description of clock */
} vcsfw_reply_test_clocktune_clock_t;
    
typedef struct VCS_PACKED vcsfw_reply_test_clocktune_s
{
    vcsUint32_t      historysize;
    vcsUint32_t      nclocks;
} vcsfw_reply_test_clocktune_t;
/* This is followed by an array of nclocks vcsfw_reply_test_clocktune_clock_t */


#include "vcsPopPack.h"

#endif      /* __VCSFW_V4CLOCKTUNE_H */
