#/* !@file CMakeLists.txt
# *******************************************************************************
# **
# **                           NDA AND NEED-TO-KNOW REQUIRED
# **
# *****************************************************************************
# **
# **  Copyright (C) 2016-2017 Synaptics Incorporated. All rights reserved.
# **
# **
# ** This file contains information that is proprietary to Synaptics
# ** Incorporated ("Synaptics"). The holder of this file shall treat all
# ** information contained herein as confidential, shall use the
# ** information only for its intended purpose, and shall not duplicate,
# ** disclose, or disseminate any of this information in any manner unless
# ** Synaptics has otherwise provided express, written permission.
# ** Use of the materials may require a license of intellectual property
# ** from a third party or from Synaptics. Receipt or possession of this
# ** file conveys no express or implied licenses to any intellectual
# ** property rights belonging to Synaptics.
# **
# **
# ** INFORMATION CONTAINED IN THIS DOCUMENT IS PROVIDED "AS-IS," AND
# ** SYNAPTICS EXPRESSLY DISCLAIMS ALL EXPRESS AND IMPLIED WARRANTIES,
# ** INCLUDING ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# ** PARTICULAR PURPOSE, AND ANY WARRANTIES OF NON-INFRINGEMENT OF ANY
# ** INTELLECTUAL PROPERTY RIGHTS. IN NO EVENT SHALL SYNAPTICS BE LIABLE
# ** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, PUNITIVE, OR
# ** CONSEQUENTIAL DAMAGES ARISING OUT OF OR IN CONNECTION WITH THE USE OF
# ** THE INFORMATION CONTAINED IN THIS DOCUMENT, HOWEVER CAUSED AND BASED
# ** ON ANY THEORY OF LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# ** NEGLIGENCE OR OTHER TORTIOUS ACTION, AND EVEN IF SYNAPTICS WAS ADVISED
# ** OF THE POSSIBILITY OF SUCH DAMAGE. IF A TRIBUNAL OF COMPETENT
# ** JURISDICTION DOES NOT PERMIT THE DISCLAIMER OF DIRECT DAMAGES OR ANY
# ** OTHER DAMAGES, SYNAPTICS' TOTAL CUMULATIVE LIABILITY TO ANY PARTY
# ** SHALL NOT EXCEED ONE HUNDRED U.S. DOLLARS.
#*/


# Setup the minimum version of CMake required
CMAKE_MINIMUM_REQUIRED(VERSION 3.4.3)

#message(STATUS "=================================================================================")
#message(STATUS "PROJECT_SOURCE_DIR   = " ${PROJECT_SOURCE_DIR})
#message(STATUS "CMAKE_BUILE_TYPE  = " ${CMAKE_BUILE_TYPE})
#
#message(STATUS "CMAKE_C_FLAGS = " ${CMAKE_C_FLAGS})
#message(STATUS "CMAKE_C_FLAGS_DEBUG = " ${CMAKE_C_FLAGS_DEBUG})
#message(STATUS "CMAKE_C_FLAGS_MINSIZEREL = " ${CMAKE_C_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_C_FLAGS_RELEASE = " ${CMAKE_C_FLAGS_RELEASE})
#message(STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO = " ${CMAKE_C_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_CXX_FLAGS = " ${CMAKE_CXX_FLAGS})
#message(STATUS "CMAKE_CXX_FLAGS_DEBUG = " ${CMAKE_CXX_FLAGS_DEBUG})
#message(STATUS "CMAKE_CXX_FLAGS_MINSIZEREL = " ${CMAKE_CXX_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_CXX_FLAGS_RELEASE = " ${CMAKE_CXX_FLAGS_RELEASE})
#message(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO = " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_EXE_LINKER_FLAGS = " ${CMAKE_EXE_LINKER_FLAGS})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_DEBUG = " ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_RELEASE = " ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS = " ${CMAKE_MODULE_LINKER_FLAGS})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_DEBUG = " ${CMAKE_MODULE_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_RELEASE = " ${CMAKE_MODULE_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS = " ${CMAKE_SHARED_LINKER_FLAGS})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_DEBUG = " ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_RELEASE = " ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS = " ${CMAKE_STATIC_LINKER_FLAGS})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_DEBUG = " ${CMAKE_STATIC_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_RELEASE = " ${CMAKE_STATIC_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO})
#message(STATUS "=================================================================================")




# Name of the cmake project we are building
# This name will be used to reference the project specific options definitions
SET(CMAKE_PROJECT   "chameleon")



# Setup the chameleon root directory
file(TO_CMAKE_PATH "$ENV{CHAMELEON_DIR}" CHAMELEON_DIR)
file(TO_CMAKE_PATH "$ENV{CMAKE_CFG_DIR}" CMAKE_CFG_DIR)

# Include the VCS common definitions
INCLUDE(${CMAKE_CFG_DIR}/modules/vcsCommon.cmake)
# Specify the name of the project
PROJECT("chameleon")

MESSAGE(STATUS "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
MESSAGE(STATUS "CHAMELEON_DIR=${CHAMELEON_DIR}")
MESSAGE(STATUS "CMAKE_CFG_DIR=${CMAKE_CFG_DIR}")
MESSAGE(STATUS "CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}")
MESSAGE(STATUS "EXECUTABLE_OUTPUT_PATH=${EXECUTABLE_OUTPUT_PATH}")
MESSAGE(STATUS "LIBRARY_OUTPUT_PATH=${LIBRARY_OUTPUT_PATH}")
MESSAGE(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "CMAKE_PLATFORM=${CMAKE_PLATFORM}")
MESSAGE(STATUS "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")


#message(STATUS "=================================================================================")
#message(STATUS "PROJECT_SOURCE_DIR   = " ${PROJECT_SOURCE_DIR})
#message(STATUS "CMAKE_BUILE_TYPE  = " ${CMAKE_BUILE_TYPE})
#
#message(STATUS "CMAKE_C_FLAGS = " ${CMAKE_C_FLAGS})
#message(STATUS "CMAKE_C_FLAGS_DEBUG = " ${CMAKE_C_FLAGS_DEBUG})
#message(STATUS "CMAKE_C_FLAGS_MINSIZEREL = " ${CMAKE_C_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_C_FLAGS_RELEASE = " ${CMAKE_C_FLAGS_RELEASE})
#message(STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO = " ${CMAKE_C_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_CXX_FLAGS = " ${CMAKE_CXX_FLAGS})
#message(STATUS "CMAKE_CXX_FLAGS_DEBUG = " ${CMAKE_CXX_FLAGS_DEBUG})
#message(STATUS "CMAKE_CXX_FLAGS_MINSIZEREL = " ${CMAKE_CXX_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_CXX_FLAGS_RELEASE = " ${CMAKE_CXX_FLAGS_RELEASE})
#message(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO = " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_EXE_LINKER_FLAGS = " ${CMAKE_EXE_LINKER_FLAGS})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_DEBUG = " ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_RELEASE = " ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS = " ${CMAKE_MODULE_LINKER_FLAGS})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_DEBUG = " ${CMAKE_MODULE_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_RELEASE = " ${CMAKE_MODULE_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS = " ${CMAKE_SHARED_LINKER_FLAGS})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_DEBUG = " ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_RELEASE = " ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO})
#
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS = " ${CMAKE_STATIC_LINKER_FLAGS})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_DEBUG = " ${CMAKE_STATIC_LINKER_FLAGS_DEBUG})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL = " ${CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_RELEASE = " ${CMAKE_STATIC_LINKER_FLAGS_RELEASE})
#message(STATUS "CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO = " ${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO})
#message(STATUS "=================================================================================")

#*************************************************************
# Add external library as prebuilt libraries
#*************************************************************
# Add ftd2xx.dll as a prebuilt library 
FILE (GLOB ftd2xx_libs "${CHAMELEON_DIR}/package/ftdi/${CMAKE_PLATFORM}/*")
FILE (COPY ${ftd2xx_libs} DESTINATION ${LIB_DIR})
ADD_LIBRARY(ftd2xx SHARED IMPORTED)
SET_PROPERTY(TARGET ftd2xx PROPERTY IMPORTED_LOCATION ${LIB_DIR}/ftd2xx.dll)
SET_PROPERTY(TARGET ftd2xx PROPERTY PROPERTY IMPORTED_IMPLIB ${LIB_DIR}/ftd2xx.lib)

# Add gtestd.dll as a prebuilt library 		   
FILE (GLOB gtesd_libs "${CHAMELEON_DIR}/package/gtest/lib/${CMAKE_PLATFORM}/${CMAKE_BUILD_TYPE}/*")
FILE (COPY ${gtesd_libs} DESTINATION ${LIB_DIR})
IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
	ADD_LIBRARY(gtestd STATIC IMPORTED)
	SET_PROPERTY(TARGET gtestd PROPERTY IMPORTED_LOCATION ${LIB_DIR}/gtestd.lib)
ELSE(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
	ADD_LIBRARY(gtest STATIC IMPORTED)
	SET_PROPERTY(TARGET gtestd PROPERTY IMPORTED_LOCATION ${LIB_DIR}/gtest.lib)
ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")

# Add libglog.dll and libglog_static.lib as a prebuilt library 
FILE (GLOB libglog_libs "${CHAMELEON_DIR}/package/glog/lib/${CMAKE_PLATFORM}/${CMAKE_BUILD_TYPE}/*")
FILE (COPY ${libglog_libs} DESTINATION ${LIB_DIR})
ADD_LIBRARY(libglog SHARED IMPORTED)
SET_PROPERTY(TARGET libglog PROPERTY IMPORTED_LOCATION ${LIB_DIR}/libglog.dll)
SET_PROPERTY(TARGET libglog PROPERTY PROPERTY IMPORTED_IMPLIB ${LIB_DIR}/libglog.lib)
ADD_LIBRARY(libglog_static STATIC IMPORTED)
SET_PROPERTY(TARGET libglog_static PROPERTY IMPORTED_LOCATION ${LIB_DIR}/libglog_static.lib)

# Add stellerAlgoShared.dll as a prebuilt library 
FILE (GLOB stellerAlgoShared_libs "${CHAMELEON_DIR}/cmlFpTestEngine/FpImageProcessing/lib/${CMAKE_PLATFORM}/${CMAKE_BUILD_TYPE}/*")
FILE (COPY ${stellerAlgoShared_libs} DESTINATION ${LIB_DIR})
ADD_LIBRARY(stellerAlgoShared SHARED IMPORTED)
SET_PROPERTY(TARGET stellerAlgoShared PROPERTY IMPORTED_LOCATION ${LIB_DIR}/stellerAlgoShared.dll)
SET_PROPERTY(TARGET stellerAlgoShared PROPERTY PROPERTY IMPORTED_IMPLIB ${LIB_DIR}/stellerAlgoShared.lib)

#*************************************************************
# Add submodule directory
#*************************************************************
# cmlFpSensorEngine
IF (${CML_BUILD_FP_SENSOR_ENGINE})
    ADD_SUBDIRECTORY(${CHAMELEON_DIR}/cmlFpSensorEngine cmlFpSensorEngine)
ENDIF (${CML_BUILD_FP_SENSOR_ENGINE})


# cmlFpTestEngine
IF (${CML_BUILD_FP_TEST_ENGINE})
    ADD_SUBDIRECTORY(${CHAMELEON_DIR}/cmlFpTestEngine cmlFpTestEngine)
ENDIF (${CML_BUILD_FP_TEST_ENGINE})

# cmlFpTestApp
IF (${CML_BUILD_FP_TEST_APP})
	# Find the Qt5Core/Qt5Core/Qt5Widgets/Qt5Xml/ActiveQt library
	FIND_PACKAGE(Qt5Core REQUIRED)
	FIND_PACKAGE(Qt5Gui REQUIRED)
	FIND_PACKAGE(Qt5Widgets REQUIRED)
	FIND_PACKAGE(Qt5Xml REQUIRED)
	FIND_PACKAGE(Qt5AxBase REQUIRED)
	FIND_PACKAGE(Qt5AxContainer REQUIRED)
    ADD_SUBDIRECTORY(${CHAMELEON_DIR}/cmlFpTestApp cmlFpTestApp)
ENDIF (${CML_BUILD_FP_TEST_APP})